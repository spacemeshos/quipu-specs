module svm_core imports commons, transactions, global_state {

  type ParsedPayload[T] = Struct [
    callArgs: Wrapper
    nonce: Nonce,
    minLayer: Long,
    maxLayer: Long,
    maxGas: Gas,
    gasPrice: GasPrice,
    nativePayload: T
  ]

  type InstanceMethodSignature = Struct [
    selector: u16,
    name: String,
    args: TypeDef,
    result: TypeDef
  ]

  //Template mount API (callback methods that a template exposes to the VM so that the VM knows how to use this template).
  interface TemplateMountAPI[IS,MS] {
    //performs parsing of template-specific part of a transaction
    fun parsePayload(tx: Transaction): ParsedPayload throws ParsingError

    //(for a given transaction) declares the limit of outgoing transfers sum
    fun maxSpend(methodSelector: Int, accountImmutableState: IS, parsedPayload: ParsedPayload): CoinAmount

    //template-specific authentication of a transaction
    //remark: this is the way transaction signatures checking is done (and therefore can be customized) in SVM
    fun verifyTx(accountImmutableState: IS, txSerialized: Wrapper, tx: Transaction, parsedPayload: ParsedPayload): Boolean

    //parsing of immutable state (which is provided at instance creation)
    fun parseImmutableState(wrapper: Wrapper): IS throws ParsingError

    //parsing of method call arguments
    fun parseCallArgs[T](methodSelector: u16, wrapper: Wrapper): T

    //list instance methods available in this template
    fun instanceMethods(): Seq[u16]

    //returns signature of a given instance method defined by this template
    //throws en exception if such a method is not defined
    fun methodSignature(methodId: u16): InstanceMethodSignature

    //initial processing to be done at instance creation
    //it can also do any validation required at this level (and abort account creation if needed)
    //returns the initial shape of the mutable state for the newly created account
    //remark: this conceptually corresponds to what a constructor does in object-oriented programming languages
    fun accountCreationHandler(accountAddress: Address, immutableState: IS, creator: Account): MS

    //performs inter-account call authorization
    //returns true if this call should be accepted
    //returns true if this call should be refused
    fun authorizeCall(enclosingTransaction: Transaction, caller: Address, method: u16, args: T): Boolean

  }

  //Methods exposed by the VM that are available to TemplateMountAPI implementations
  interface TemplateMountSocket {
    //validates Ed25519 signature
    fun signatureValidation(data: Wrapper, publicKey: Ed25519PublicKey, signature: Ed25519Sig)

    //calculates platform default hash from given sequence of values
    //elements of the sequence are individually serialized, then concatenated, then hashed with Blake-3 algorithm
    //Blake-3 reference: https://github.com/BLAKE3-team/BLAKE3/
    fun cryptoHashPure(values: Seq[Any]): Hash

    //same as cryptoHashPure(values: Seq[Any]) but implicitly adds the Version Information Metadata
    //as first element of the list (before hashing)
    fun cryptoHashWithVIM(values: Seq[Any]): Hash
  }

  //Host API (methods that VM exposes to template developers).
  interface HostAPI {

    //transfers specified amount of native coin (smesh) to specified account
    fun transfer(targetAccount: Address, amount: CoinAmount): void

    //executes call of specified instance method on target account
    //(it is allowed that target account equals to calling account)
    //caution: this call is subject to authorization (on the side of the called account) and so can be rejected
    fun call[T,R](targetAccount: Address, method: u16, args: T): R

    //current balance of the caller account
    fun balance(): CoinAmount

    //layer id (=height) of the blockchain block including the currently executing transaction
    fun layerId(): u64

    //current nonce of the caller account
    fun nonce(): Nonce
  }

  //External interface of SVM
  interface SVM {

    //main entry point of the SVM (this is how transactions are executed)
    fun exec(globalState: GlobalState, tx: Transaction): GlobalState {
      val txBubble = new TxExecutionProcess(globalState, tx)
      val newGlobalState = switch typeOf(tx) {
        case SelfSpawnTx: txBubble.execSelfSpawn(globalState, tx)
        case SpawnTx: txBubble.execSpawn(globalState, tx)
        case LocalMethodCall: txBubble.execLocalMethodCall(globalState, tx)
        case ForeignMethodCallTx: txBubble.execForeignMethodCall(globalState, tx)
        case TemplateDeployTx: throw Error("Not supported in this version of SVM")
      }

      return newGlobalState
    }
  }

  //Encapsulates the process of a single transaction execution
  //We abstract transforming the global state - possibly several times.
  interface TxExecutionProcess {
    //global state on top of which this execution process has started
    fun initialGlobalState(): GlobalState

    //latest global state achieved by working of this execution process
    fun globalState(): GlobalState

    //performs transition of global state (i.e. sets given global state as current)
    fun transition(newGlobalState: GlobalState): void

    //retrieves mount API of given template)
    fun getMountAPI[T](template: Address): T

    //returns the current value of gas metering counter
    //this measures number of gas units burned since the start of the current transaction
    fun gasCounterValue(): Gas

    //estimates the gas consumption of given transaction, if it will be executed
    //caution: in Genesis-SVM there is no "real" gas metering and these estimates are the actual way of calculating gas for transactions
    fun estimateGas(tx: Transaction): Gas

    //calculates platform default hash from given sequence of values
    //elements of the sequence are individually serialized, then concatenated, then hashed with Blake-3 algorithm
    //Blake-3 reference: https://github.com/BLAKE3-team/BLAKE3/
    fun cryptoHashPure(values: Seq[Any]): Hash

    //same as cryptoHashPure(values: Seq[Any]) but implicitly adds the Version Information Metadata
    //as first element of the list (before hashing)
    fun cryptoHashWithVIM(values: Seq[Any]): Hash

    //Invokes instance method on given account. Arguments:
    //  account: address of the target account
    //  method: method selector
    //  args: arguments
    //This execution leads to a new global state, which is then set as the new current global state.
    fun callInstanceMethod[T,R](account: Address, method: u16, args: T): R

    //================= executes self-spawn transaction =================
    fun execSelfSpawn(tx: SelfSpawnTx): void {
      //checking correctness of provided template address
      //the new account will the an instance of this template
      val template: Template = switch self.globalState().get(tx.template) {
        case None: throw Error("template not found")
        case Some(template: Template): template
        case Some(stub: Stub): throw Error("expected a template, found a stub")
        case Some(account: Account): throw Error("expected a template, found an account")
      }

      //retrieving API of this template
      val templateAPI: TemplateAPI[IS,MS] = self.getMountAPI(template)

      //parsing the payload part of transaction (template-specific parsing is applied here)
      val parsedPayload: ParsedPayload = templateAPI.parsePayload(tx.payload)

      //initializing immutable state of the new account
      val parsedImmutableState: IS = templateAPI.parseImmutableState(parsedPayload.callArgs),

      //tx signatures check (template-specific)
      if (! templateAPI.verifyTx(parsedImmutableState, tx, parsedPayload)) {
        throw Error("invalid tx signature")
      }

      //calculating principal's address
      val principal: Address = self.cryptoHashPure(Seq(tx.template, parsedPayload.callArgs))

      //account at this address must be a stub for self-spawn to be successful
      val stubBalance: CoinAmount = switch self.globalState().get(principal) {
        case None: throw Error("stub not found: $principal")
        case Some(template: Template): throw Error("expected a stub, found a template: address=$principal")
        case Some(stub: Stub): stub.balance
        case Some(account: Account): throw Error("expected a stub, found an account: address=$principal")
      }

      //calculating coin balance required to execute this transaction
      //caution: we do not call `templateAPI.maxSpend(tx)` here because
      //self-spawn is not supposed to execute any coin transfers
      val requiredBalance: CoinAmount = parsedPayload.maxGas * parsedPayload.gasPrice

      //checking if current account balance can cover this transaction
      if (stubBalance < requiredBalance) {
        throw Error("insufficient balance for account: address=$principal, required amount was: $requiredBalance")
      }

      //initializing mutable state of the new account
      val initialShapeOfMutableState: MS = templateAPI.accountCreationHandler(principal, parsedImmutableState, principal)

      //instead of real gas metering we use hardcoded-gas table in Genesis-SVM
      val gasConsumed: Gas = self.estimateGas(tx, parsedPayload)

      //aborting if consumed gas exceeds max gas (max gas was declared by the transaction)
      if (gasConsumed > parsedPayload.maxGas) {
        throw Error("exceeded max gas")
      }

      //creating new account
      val newAccount: Account[IS,MS] = Account[IS,MS](
          template = tx.template,
          nonce = 0,
          creator = principal,
          balance = stubBalance - gasConsumed * parsedPayload.gasPrice,
          immutableState = parsedImmutableState,
          mutableState = initialShapeOfMutableState
      )

      //creating new global state with the entry at principal address updated (stub -> account state)
      self.transition(self.globalState().addOrReplace(principal -> newAccount))
    }

    //================= executes spawn transaction ===================
    fun execSpawn(tx: SpawnTx): void {
      //checking if principal is already existing in the global state
      val principalAccount: Account[ISP, MSP] = switch self.globalState().get(tx.principal) {
        case None: throw Error("account not found: ${tx.principal}")
        case Some(template: Template): throw Error("expected an account, found a template")
        case Some(stub: Stub): throw Error("expected an account, found a stub")
        case Some(account: Account): account
      }

      //checking correctness of provided template address
      //the new account will the an instance of this template
      val newAccountTemplate: Template = switch self.globalState().get(tx.template) {
        case None: throw Error("template not found")
        case Some(template: Template): template
        case Some(stub: Stub): throw Error("expected template, found a stub")
        case Some(account: Account): throw Error("expected template, found an account")
      }

      //retrieving API of new account's template
      val newAccountTemplateAPI: TemplateAPI[ISA,MSA] = self.getMountAPI(newAccountTemplate)

      //retrieving API of principal's template
      val principalTemplateAPI: TemplateAPI[ISP, MSP] = self.getMountAPI(principalAccount.template)

      //parsing the payload part of transaction (template-specific parsing is applied here)
      val parsedPayload: ParsedPayload = principalTemplateAPI.parsePayload(tx.payload)

      //tx signatures check (template-specific)
      if (! principalTemplateAPI.verifyTx(principalAccount.immutableState, tx, parsedPayload)) {
        throw Error("invalid tx signature")
      }

      //tx nonce check
      //Caution: Genesis-SVM uses fixed nonce algorithm ("counter with gaps"); nonce customization is to be introduced in Full-SVM
      if (parsedPayload.nonce <= principalAccount.nonce) {
        throw Error("nonce mismatch: account-nonce = ${account.nonce} tx-nonce=${payload.nonce}")
      }

      //calculating the address of the new account
      val addressOfNewAccount: Address = self.cryptoHashPure(Seq(tx.template, parsedPayload.callArgs))

      //account at this address must not be initialized yet
      val stubBalance: CoinAmount = switch globalState.get(addressOfNewAccount) {
        case None: 0 //no such account yet
        case Some(template: Template): throw Error("expected a stub, found a template: address=$principal")
        case Some(stub: Stub): stub.balance //account exists as a stub (and we accept such case)
        case Some(account: Account): throw Error("expected a stub, found an account: address=$principal")
      }

      //calculating coin balance required to execute this transaction
      val requiredBalance: CoinAmount = parsedPayload.maxGas * parsedPayload.gasPrice

      //checking if principal account balance can cover this transaction
      if (principalAccount.balance < requiredBalance) {
        throw Error("insufficient balance for account: address=${tx.principal}, required amount was: $requiredBalance")
      }

      //initializing immutable state of the new account
      val parsedImmutableState: IS = newAccountTemplateAPI.parseImmutableState(parsedPayload.callArgs),

      //initializing mutable state of the new account
      val initialShapeOfMutableState: MS = newAccountTemplateAPI.accountCreationHandler(principal, parsedImmutableState, principal)

      //instead of real gas metering we use hardcoded-gas table in Genesis-SVM
      //val gasConsumed: Gas = self.gasCounterValue() - gasAtBeginning
      val gasConsumed: Gas = self.estimateGas(tx, parsedPayload)

      //aborting if consumed gas exceeds max gas (max gas was declared by the transaction)
      if (gasConsumed > parsedPayload.maxGas) {
        throw Error("exceeded max gas")
      }

      //creating new account
      val newAccount: Account[ISA,MSA] = Account[ISA,MSA](
          template = tx.template,
          nonce = 0,
          creator = addressOfNewAccount,
          balance = stubBalance,
          immutableState = parsedImmutableState,
          mutableState = initialShapeOfMutableState
      )

      //updating principal account (nonce and balance)
      val updatedPrincipalAccount: Account[ISP,MSP] = Account[ISP,MSP](
          template = principalAccount.template,
          nonce = parsedPayload.nonce,
          balance = principalAccount.balance - gasConsumed * parsedPayload.gasPrice,
          immutableState = principalAccount.immutableState,
          mutableState = principalAccount.mutableState
      )

      //creating new global state with both new account and principal account entries updated
      val newGlobalState: GlobalState = globalState.addOrReplace(addressOfNewAccount -> newAccount)
                                                   .addOrReplace(tx.principal -> updatedPrincipalAccount)

      self.transition(newGlobalState)
    }

    //================= executes local-method-call transaction =============
    fun execLocalMethodCall(tx: LocalMethodCallTx): void {
      //checking if principal is already existing in the global state
      val principalAccount: Account[ISP, MSP] = switch self.globalState().get(tx.principal) {
        case None: throw Error("account not found: ${tx.principal}")
        case Some(template: Template): throw Error("expected an account, found a template")
        case Some(stub: Stub): throw Error("expected an account, found a stub")
        case Some(account: Account): account
      }

      //retrieving API of principal's template
      val principalTemplateAPI: TemplateAPI[ISP, MSP] = self.getMountAPI(principalAccount.template)

      //parsing the payload part of transaction (template-specific parsing is applied here)
      val parsedPayload: ParsedPayload = principalTemplateAPI.parsePayload(tx.payload)

      //tx signatures check (template-specific)
      if (! principalTemplateAPI.verifyTx(principalAccount.immutableState, tx, parsedPayload)) {
        throw Error("invalid tx signature")
      }

      //tx nonce check
      //Caution: Genesis-SVM uses fixed nonce algorithm ("counter with gaps"); nonce customization is to be introduced in Full-SVM
      if (parsedPayload.nonce <= principalAccount.nonce) {
        throw Error("nonce mismatch: account-nonce = ${account.nonce} tx-nonce=${payload.nonce}")
      }

      //calculating coin balance required to execute this transaction
      val requiredBalance: CoinAmount = principalTemplateAPI.maxSpend(tx) + parsedPayload.maxGas * parsedPayload.gasPrice

      //checking if principal account balance can cover this transaction
      if (principalAccount.balance < requiredBalance) {
        throw Error("insufficient balance for account: address=${tx.principal}, required amount was: $requiredBalance")
      }

      //instead of real gas metering we use hardcoded-gas table in Genesis-SVM
      //val gasConsumed: Gas = self.gasCounterValue() - gasAtBeginning
      val gasConsumed: Gas = self.estimateGas(tx, parsedPayload)

      //aborting if consumed gas exceeds max gas (max gas was declared by the transaction)
      if (gasConsumed > parsedPayload.maxGas) {
        throw Error("exceeded max gas")
      }

      //checking if required method is defined by the corresponding template
      if (! principalTemplateAPI.instanceMethods().contains(tx.methodSelector)) {
        throw Error("instance method ${tx.methodSelector} not defined for account ${tx.principal} with template ${principalAccount.template}")
      }

      //parsing call arguments
      val parsedCallArgs: T = principalTemplateAPI.parseCallArgs(tx.methodSelector, parsedPayload.callArgs)

      //updating principal account (nonce and balance)
      //caution: here we apply the payment for the whole maxGas (this is required for compatibility with future Full-SVM semantics)
      val ps1: Account[ISP,MSP] = Account[ISP,MSP](
          template = principalAccount.template,
          nonce = parsedPayload.nonce,
          balance = principalAccount.balance - parsedPayload.maxGas * parsedPayload.gasPrice,
          immutableState = principalAccount.immutableState,
          mutableState = principalAccount.mutableState
      )

      //creating new global state with both new account and principal account entries updated
      val gs1: GlobalState = globalState.addOrReplace(principal -> ps1)
      self.transition(gs1)

      //executing method call
      //caution 1: call result is deliberately ignored
      //caution 2: notice that here another global state transition happens
      self.callInstanceMethod(tx.principal, tx.methodSelector, parsedCallArgs)

      //if the actual consumption of gas was less then maxGas then we process pay-back here
      //caution: because real gas metering is not working in Genesis-SVM, we use gasConsumed value from the estimation, not from the actual metering
      if (gasConsumed < parsedPayload.maxGas) {
        val principalBalanceAfterCall: CoinAmount = self.globalState().get(tx.principal).balance
        val principalMutableStateAfterCall: MSP = self.globalState().get(tx.principal).mutableState
        val payback: CoinAmount = (parsedPayload.maxGas - gasConsumed) * parsedPayload.gasPrice
        val ps2: Account[ISP,MSP] = Account[ISP,MSP](
            template = principalAccount.template,
            nonce = parsedPayload.nonce,
            balance = principalBalanceAfterCallWasExecuted + payback,
            immutableState = principalAccount.immutableState,
            mutableState = principalMutableStateAfterCall
        )
        self.transition(globalState.addOrReplace(tx.principal -> ps2))
      }
    }

    //================= executes foreign-method-call transaction =============
    fun execForeignMethodCall(tx: LocalMethodCallTx): void {
      //checking if principal is already existing in the global state
      val principalAccount: Account[ISP, MSP] = switch self.globalState().get(tx.principal) {
        case None: throw Error("account not found: ${tx.principal}")
        case Some(template: Template): throw Error("expected an account, found a template")
        case Some(stub: Stub): throw Error("expected an account, found a stub")
        case Some(account: Account): account
      }

      //retrieving API of principal's template
      val principalTemplateAPI: TemplateAPI[ISP, MSP] = self.getMountAPI(principalAccount.template)

      //parsing the payload part of transaction (template-specific parsing is applied here)
      val parsedPayload: ParsedPayload = principalTemplateAPI.parsePayload(tx.payload)

      //tx signatures check (template-specific)
      if (! principalTemplateAPI.verifyTx(principalAccount.immutableState, tx, parsedPayload)) {
        throw Error("invalid tx signature")
      }

      //tx nonce check
      //Caution: Genesis-SVM uses fixed nonce algorithm ("counter with gaps"); nonce customization is to be introduced in Full-SVM
      if (parsedPayload.nonce <= principalAccount.nonce) {
        throw Error("nonce mismatch: account-nonce = ${account.nonce} tx-nonce=${payload.nonce}")
      }

      //calculating coin balance required to execute this transaction
      val requiredBalance: CoinAmount = principalTemplateAPI.maxSpend(tx) + parsedPayload.maxGas * parsedPayload.gasPrice

      //checking if principal account balance can cover this transaction
      if (principalAccount.balance < requiredBalance) {
        throw Error("insufficient balance for account: address=${tx.principal}, required amount was: $requiredBalance")
      }

      //instead of real gas metering we use hardcoded-gas table in Genesis-SVM
      //val gasConsumed: Gas = self.gasCounterValue() - gasAtBeginning
      val gasConsumed: Gas = self.estimateGas(tx, parsedPayload)

      //aborting if consumed gas exceeds max gas (max gas was declared by the transaction)
      if (gasConsumed > parsedPayload.maxGas) {
        throw Error("exceeded max gas")
      }

      //checking if target account is already existing in the global state
      val targetAccount: Account[ISP, MSP] = switch self.globalState().get(tx.targetAccount) {
        case None: throw Error("account not found: ${tx.targetAccount}")
        case Some(template: Template): throw Error("expected an account, found a template")
        case Some(stub: Stub): throw Error("expected an account, found a stub")
        case Some(account: Account): account
      }

      //retrieving mount API of target account's template
      val targetAccountTemplateAPI: TemplateAPI[ISP, MSP] = self.getMountAPI(targetAccount.template)

      //checking if required method is defined
      if (! targetAccountTemplateAPI.instanceMethods().contains(tx.methodSelector)) {
        throw Error("instance method ${tx.methodSelector} not defined for account ${tx.targetAccount} with template ${targetAccount.template}")
      }

      //parsing call arguments
      val parsedCallArgs: T = targetAccountTemplateAPI.parseCallArgs(tx.methodSelector, parsedPayload.callArgs)

      //updating principal account (nonce and balance)
      //caution: here we apply the payment for the whole maxGas (this is required for compatibility with future Full-SVM semantics)
      val ps1: Account[ISP,MSP] = Account[ISP,MSP](
          template = principalAccount.template,
          nonce = parsedPayload.nonce,
          balance = principalAccount.balance - parsedPayload.maxGas * parsedPayload.gasPrice,
          immutableState = principalAccount.immutableState,
          mutableState = principalAccount.mutableState
      )

      //creating new global state with both new account and principal account entries updated
      val gs1: GlobalState = globalState.addOrReplace(principal -> ps1)
      self.transition(gs1)

      //authorization of this call on the side of target account
      val interAccountCallApprovalOK: Boolean = self.authorizeCall(tx, tx.principal, tx.methodSelector, parsedCallArgs)

      if (! interAccountCallApprovalOK) {
        throw Error("call auth was negative: target account ${tx.targetAccount} refused to authorize invoking method ${tx.methodSelector} on behalf of ${tx.principal}")
      }

      //executing method call
      //caution 1: call result is deliberately ignored
      //caution 2: notice that here another global state transition happens
      self.callInstanceMethod(tx.targetAccount, tx.methodSelector, parsedCallArgs)

      //if the actual consumption of gas was less then maxGas then we process pay-back here
      //caution: because real gas metering is not working in Genesis-SVM, we use gasConsumed value from the estimation, not from the actual metering
      if (gasConsumed < parsedPayload.maxGas) {
        val principalBalanceAfterCall: CoinAmount = self.globalState().get(tx.principal).balance
        val principalMutableStateAfterCall: MSP = self.globalState().get(tx.principal).mutableState
        val payback: CoinAmount = (parsedPayload.maxGas - gasConsumed) * parsedPayload.gasPrice
        val ps2: Account[ISP,MSP] = Account[ISP,MSP](
            template = principalAccount.template,
            nonce = parsedPayload.nonce,
            balance = principalBalanceAfterCallWasExecuted + payback,
            immutableState = principalAccount.immutableState,
            mutableState = principalMutableStateAfterCall
        )
        self.transition(globalState.addOrReplace(tx.principal -> ps2))
      }

    }

  }
}
