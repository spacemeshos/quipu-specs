module MultiSigWallet_Template imports common, svm_core, transactions {

  type ImmutableState = Struct [
    publicKeys: Seq[Ed25519PublicKey],
    requiredNumberOfSignatures: Byte
  ]

  type MutableState = Struct [
  ]

  type SelfSpawn_Payload = Struct [
    gasPrice: GasPrice,
    immutableState: PrefixedWrapper,
    signatures: Map[Byte, Ed25519Sig]
  ];

  type Spawn_Payload = Struct [
    gasPrice: GasPrice,
    nonce: Nonce,
    immutableState: PrefixedWrapper,
    signatures: Map[Byte, Ed25519Sig]
  ];

  type LocalMethodCall_Payload = Struct [
    gasPrice: GasPrice,
    nonce: Nonce,
    methodArgsBlob: PrefixedWrapper
    signatures: Map[Byte, Ed25519Sig]
  ];

  type ForeignMethodCall_Payload = Struct [
    gasPrice: GasPrice,
    nonce: Nonce,
    methodArgsBlob: PrefixedWrapper,
    signatures: Map[Byte, Ed25519Sig]
  ]

  behaviour Mount(vm: TemplateMountSocket) implements TemplateMountAPI[ImmutableState,MutableState] {

    fun parsePayload(tx: Transaction): ParsedPayload throws ParsingError {
      switch typeOf(tx) {
        case SelfSpawnTx:
          val nativePayload: SelfSpawn_Payload = Quipu.parse[SelfSpawn_Payload](tx.payload)
          return new ParsedPayload[SelfSpawn_Payload][
              callArgs = nativePayload.immutableStateBlob,
              nonce = 0,
              minLayer = 0,
              maxLayer = ProtocolConstants.MAX_LAYER,
              maxGas =  ProtocolConstants.MAX_TX_GAS_ALLOWED,
              gasPrice = nativePayload.gasPrice,
              nativePayload = nativePayload
          ]

        case SpawnTx:
          val nativePayload: Spawn_Payload = Quipu.parse[Spawn_Payload](tx.payload)
          return new ParsedPayload[Spawn_Payload][
              callArgs = nativePayload.immutableStateBlob,
              nonce = nonce,
              minLayer = 0,
              maxLayer = ProtocolConstants.MAX_LAYER,
              maxGas =  ProtocolConstants.MAX_TX_GAS_ALLOWED,
              gasPrice = nativePayload.gasPrice,
              nativePayload = nativePayload
          ]

        case LocalMethodCall:
          val nativePayload: LocalMethodCall_Payload =  Quipu.parse[LocalMethodCall_Payload](tx.payload)
          return new ParsedPayload[LocalMethodCall_Payload][
              callArgs = nativePayload.methodArgsBlob,
              nonce = nonce,
              minLayer = 0,
              maxLayer = ProtocolConstants.MAX_LAYER,
              maxGas =  ProtocolConstants.MAX_TX_GAS_ALLOWED,
              gasPrice = nativePayload.gasPrice,
              nativePayload = nativePayload
          ]

        case ForeignMethodCallTx:
          val nativePayload: LocalMethodCall_Payload =  Quipu.parse[LocalMethodCall_Payload](tx.payload)
          return new ParsedPayload[LocalMethodCall_Payload][
              callArgs = nativePayload.methodArgsBlob,
              nonce = nonce,
              minLayer = 0,
              maxLayer = ProtocolConstants.MAX_LAYER,
              maxGas =  ProtocolConstants.MAX_TX_GAS_ALLOWED,
              gasPrice = nativePayload.gasPrice,
              nativePayload = nativePayload
          ]

        case TemplateDeployTx: throw Error("Not supported in this version of SVM")
      }
    }

    @autogenerated
    fun maxSpend(methodSelector: Int, accountImmutableState: IS, parsedPayload: ParsedPayload): CoinAmount

    fun verifyTx(accountImmutableState: IS, txSerialized: Wrapper, tx: Transaction, parsedPayload: ParsedPayload): Boolean {
      //finding number of signatures provided
      val numberOfSignaturesProvided: u16 = parsedPayload.nativePayload.signatures.size

      //calculating combined size (in bytes) occupied by signatures collection
      val combinedSizeOfSignatures: u16 = Quipu.serializedSizeOf(parsedPayload.nativePayload.signatures)

      //extracting signed data from the binary transaction
      val signedData: Wrapper = txSerialized.dropBytesRight(combinedSizeOfSignatures)

      //loop over the signatures collection (individually checking each signature)
      //we also check that:
      //  1. signature labels are within range
      //  2. signatures collection is sorted by labels
      //caution: possible duplication of labels is discovered at deserialization, because of Map semantics in Quipu
      val n: u16 = immutableState.publicKeys.size
      var biggestLabelSoFar: Byte = 0
      for ((label, signature) <- parsedPayload.nativePayload.signatures) {
        if (label > immutableState.publicKeys.size - 1)
          return false //label outside range
        if (label < biggestLabelSoFar)
          return false //sorting by labels is violated
        biggestLabelSoFar = label

        //cryptographic validation of the signature
        val isOK: Boolean = vm.signatureValidation(signedData, immutableState.publicKeys(label), signature)
        if (! isOK)
          return false
      }

      return true
    }

    fun parseImmutableState(wrapper: Wrapper): ImmutableState {
      return Quipu.parse[ImmutableState](wrapper)
    }

    @autogenerated
    fun parseCallArgs[T](methodSelector: u16, wrapper: Wrapper): T

    @autogenerated
    fun instanceMethods(): Seq[u16]

    @autogenerated
    fun methodSignature(methodId: u16): InstanceMethodSignature

    fun accountCreationHandler(accountAddress: Address, immutableState: ImmutableState, creator: Account): MutableState {
      if (immutableState.publicKeys.isEmpty())
        throw Error("List of public keys is empty")

      if (immutableState.publicKeys.size() > 256)
        throw Error("List of public keys has size ${immutableState.publicKeys.size()} but only up to 256 keys are supported")

      if (immutableState.requiredNumberOfSignatures > immutableState.size())
        throw Error("Required number of signatures exceed the number of public keys")

      return MutableState()
    }

    fun authorizeCall(enclosingTransaction: Transaction, caller: Address, method: u16, args: T, accountState: Account[IS,MS]): Boolean {
      return false
    }

  }

  interface InstanceMethods {

    @methodSelector=16
    @maxSpend={amount}
    fun spend(recipient: Address, amount: CoinAmount): void

  }

  behaviour AccountImpl(hostAPI: HostAPI, publicKeys: Seq[Ed25519PublicKey], requiredNumberOfSignatures: Byte) implements InstanceMethods {

    fun spend(recipient: Address, amount: CoinAmount): void {
      hostAPI.transfer(recipient, amount)
    }

  }

}
